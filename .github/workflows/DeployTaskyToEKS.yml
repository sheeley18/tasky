name: Build and Deploy Tasky to EKS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: tasky
  EKS_CLUSTER_NAME: tasky-eks-gF4aG3Ae

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION 2>/dev/null || echo "Repository already exists"
        
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output image URI for later steps
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        
    - name: Generate SBOM with Syft
      uses: anchore/sbom-action@v0
      id: sbom
      with:
        image: ${{ steps.build-image.outputs.image }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM to repository
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sbom-${{ github.sha }}
        path: sbom.spdx.json
        retention-days: 90

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      id: scan
      with:
        image: ${{ steps.build-image.outputs.image }}
        fail-build: false
        severity-cutoff: critical
        output-format: sarif
        sarif-file: vulnerabilities.sarif
        sbom: sbom.spdx.json
      continue-on-error: true

    - name: Upload vulnerability scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('vulnerabilities.sarif') != ''
      with:
        sarif_file: vulnerabilities.sarif
        category: "Container Scan"

    - name: Upload SBOM as release asset
      if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: sbom.spdx.json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate vulnerability report summary
      if: always()
      run: |
        echo "## Container Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
          
        # Run Grype again for human-readable output
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          anchore/grype:latest ${{ steps.build-image.outputs.image }} \
          -o table --only-fixed >> grype_report.txt 2>/dev/null || echo "No fixable vulnerabilities found" >> grype_report.txt
          
        echo "### Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ steps.build-image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### SBOM (Software Bill of Materials)" >> $GITHUB_STEP_SUMMARY
        echo "SBOM generated in SPDX format" >> $GITHUB_STEP_SUMMARY
        echo "Available as build artifact: \`sbom-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Vulnerability Details" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        head -20 grype_report.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Full security scan results available in the Security tab**" >> $GITHUB_STEP_SUMMARY

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
        
    - name: Deploy to EKS
      env:
        IMAGE_URI: ${{ steps.build-image.outputs.image }}
      run: |
        # Replace placeholder with actual image URI
        sed -i "s|IMAGE_PLACEHOLDER|$IMAGE_URI|g" k8s-manifests.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s-manifests.yaml
        
        # Wait for deployment to complete
        kubectl rollout status deployment/tasky-deployment --timeout=300s
        
    - name: Get deployment info
      if: github.ref == 'refs/heads/main'
      run: |
        echo "## Tasky Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Application Details" >> $GITHUB_STEP_SUMMARY
        echo "**Image:** \`${{ steps.build-image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Kubernetes Resources" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        kubectl get pods -l app=tasky >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        kubectl get service tasky-service >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Load Balancer URL" >> $GITHUB_STEP_SUMMARY
        LB_URL=$(kubectl get service tasky-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "Pending...")
        echo "**Access your app at:** http://$LB_URL" >> $GITHUB_STEP_SUMMARY
        
    - name: Comment PR with deployment status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `##Tasky Build Complete!
          
          **Image built:** \`${{ steps.build-image.outputs.image }}\`
          
          Docker image successfully built and pushed to ECR
          
          *Note: Deployment only happens on merge to main branch*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
